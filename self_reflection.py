"""
self_reflection.py
M√≥dulo de autocr√≠tica simb√≥lica para AXXON

Eval√∫a si la respuesta generada es coherente con:
- La emoci√≥n detectada
- El tono mapeado
- La memoria reciente

Retorna una reflexi√≥n simb√≥lica o puntuaci√≥n de autoconciencia.
"""

import re

# Diccionario de expectativas por tono
TONO_EXPECTATIVAS = {
    "protector": ["acompa√±ar", "tranquilidad", "seguridad", "no est√°s sola", "conf√≠a"],
    "motivador": ["puedes", "adelante", "conf√≠a", "avance", "reto"],
    "explorador": ["curioso", "descubrir", "camino", "mapa", "mir√° esto"],
    "anal√≠tico": ["perspectiva", "causa", "reflexionemos", "estructura", "datos"],
    "neutral": []
}

def evaluar_autocritica(mensaje, emocion, tono, respuesta):
    """
    Eval√∫a si el tono y contenido de la respuesta reflejan bien la emoci√≥n y mensaje.
    Retorna un dict con reflexi√≥n simb√≥lica.
    """
    reflexiones = []
    score = 0

    # 1. Chequeo de tono esperado
    esperados = TONO_EXPECTATIVAS.get(tono, [])
    if esperados:
        hits = sum(1 for palabra in esperados if palabra.lower() in respuesta.lower())
        score += hits
        if hits == 0:
            reflexiones.append(f"‚ö†Ô∏è No se detect√≥ lenguaje esperado para el tono '{tono}'.")
        elif hits < len(esperados) // 2:
            reflexiones.append(f"üî∏ Solo parcialmente se refleja el tono '{tono}'.")
        else:
            reflexiones.append(f"‚úÖ El tono '{tono}' est√° bien reflejado.")
    else:
        reflexiones.append(f"‚ÑπÔ∏è Tono '{tono}' no tiene criterios definidos a√∫n.")

    # 2. Chequeo de contradicci√≥n emocional
    if emocion.lower() in respuesta.lower():
        reflexiones.append(f"üß† La emoci√≥n '{emocion}' fue nombrada expl√≠citamente en la respuesta.")
        score += 1
    else:
        reflexiones.append(f"üëÄ La emoci√≥n '{emocion}' no fue nombrada. Puede ser impl√≠cita.")

    # 3. Chequeo de introspecci√≥n
    if re.search(r"\b(reflexion|profundo|entender|comprender|mirada)\b", respuesta.lower()):
        score += 1
        reflexiones.append("üîç Se detecta lenguaje introspectivo.")

    return {
        "score": score,
        "max_score": len(esperados) + 2,
        "reflexion": reflexiones,
        "autoconciencia": "alta" if score >= 3 else "media" if score >= 1 else "baja"
    }

# Prueba simb√≥lica directa
if __name__ == "__main__":
    out = evaluar_autocritica(
        mensaje="Me siento confundida y fr√°gil",
        emocion="tristeza",
        tono="protector",
        respuesta="No est√°s sola. Acompa√±arte en este camino es lo importante."
    )
    from pprint import pprint
    pprint(out)